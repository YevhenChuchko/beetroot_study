# Сортування вибором
# У сортуванні вибором ми починаємо з пошуку мінімального значення в заданому списку
# і переміщуємо його до відсортованого списку. Потім ми повторюємо цей процес для
# кожного з елементів, що залишилися у невідсортованому списку. Наступний елемент,
# що потрапляє до відсортованого списку, порівнюється з існуючими елементами і
# розміщується на його правильній позиції. Таким чином, в кінці всі елементи з
# невідсортованого списку будуть відсортовані.



def choice_sort(sequence):
    # Вкладена функція для знаходження індексу максимального елемента в поточній частині списку
    def get_max_index():
        max_index = 0  # вважаємо, що максимальний елемент знаходиться на першому місці
        # Ітеруємося через список до right_bound включно
        for index in range(right_bound + 1):
            # Якщо знаходимо елемент більший за поточний максимум, оновлюємо max_index
            if sequence[max_index] < sequence[index]:
                max_index = index
        return max_index  # Повертаємо індекс максимального елемента

    # Встановлюємо початкову праву межу списку (останній індекс)
    right_bound = len(sequence) - 1
    # Поки права межа більше 1, продовжуємо сортування
    while right_bound > 1:
        # Знаходимо індекс максимального елемента в поточному діапазоні
        max_index = get_max_index()
        # Міняємо місцями максимальний елемент з елементом на правій межі
        sequence[right_bound], sequence[max_index] = sequence[max_index], sequence[right_bound]
        # Зменшуємо праву межу, виключаючи останній елемент з подальшого розгляду
        right_bound -= 1
        # Виводимо поточний стан списку після кожної ітерації
        print(sequence)
    return sequence

if __name__ == "__main__":
    to_sort = [15, 9, 8, 1, 4, 11, 7, 12, 13, 6, 5, 3, 16, 2, 10, 14]
    print(choice_sort(to_sort))
